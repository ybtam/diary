# Production-like environment for testing
version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: diary
      POSTGRES_USER: diary_user
      POSTGRES_PASSWORD: production_password
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./postgres-config/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U diary_user -d diary"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - diary-network

  api:
    build:
      context: ../../../
      dockerfile: apps/api/Dockerfile
      target: runner
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://diary_user:production_password@postgres:5432/diary
      JWT_SECRET: production-jwt-secret-use-vault
      API_URL: http://api:3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - diary-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  web:
    build:
      context: ../../../
      dockerfile: apps/web/Dockerfile
      target: runner
    environment:
      NODE_ENV: production
      PORT: 3000
      API_URL: http://api:3001
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: production-nextauth-secret-use-vault
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - diary-network
    restart: unless-stopped

  migration:
    build:
      context: ../../../
      dockerfile: apps/db/Dockerfile
      target: migrator
    command: ["pnpm", "migrate:prod"]
    environment:
      DATABASE_URL: postgresql://diary_user:production_password@postgres:5432/diary
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - diary-network
    restart: "no"

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: diary-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
      - api
    networks:
      - diary-network
    restart: unless-stopped

volumes:
  postgres_prod_data:
    driver: local

networks:
  diary-network:
    driver: bridge