name: Build and Push Docker Images

on:
  push:
    branches:
      - main
    paths:
      - 'apps/**'
      - 'packages/**'
      - 'pnpm-lock.yaml'
      - '.github/workflows/docker-build.yml'
      - 'turbo.json'
  release:
    types: [published]
#  pull_request:
#    branches:
#      - main
#    paths:
#      - 'apps/**'
#      - 'packages/**'
#      - 'pnpm-lock.yaml'
#      - '.github/workflows/docker-build.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository }}

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.changes.outputs.api }}
      web: ${{ steps.changes.outputs.web }}
      db: ${{ steps.changes.outputs.db }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            api:
              - 'apps/api/**'
              - 'apps/db/**'
              - 'packages/**'
              - 'pnpm-lock.yaml'
              - 'turbo.json'
            web:
              - 'apps/web/**'
              - 'packages/**'
              - 'pnpm-lock.yaml'
              - 'turbo.json'
            db:
              - 'apps/db/**'
              - 'pnpm-lock.yaml'
              - 'turbo.json'

  build-api:
    name: Build API Image
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.api == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}/api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-web:
    name: Build Web Image
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.web == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}/web
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/web/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-db-migration:
    name: Build DB Migration Image
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.db == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}/db-migration
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/db/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-api, build-web, build-db-migration]
    if: always() && github.ref == 'refs/heads/main' && (needs.build-api.result == 'success' || needs.build-web.result == 'success' || needs.build-db-migration.result == 'success' || (needs.build-api.result == 'skipped' && needs.build-web.result == 'skipped' && needs.build-db-migration.result == 'skipped'))
    steps:
      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.GITOPS_REPOSITORY }}
          token: ${{ secrets.GITOPS_TOKEN }}
          path: gitops
          
      - name: Update base image tags
        run: |
          # Update base API image tag only if API was built
          if [ "${{ needs.build-api.result }}" == "success" ] && [ -f gitops/base/api/deployment.yaml ]; then
            sed -i "s|image: ${{ env.IMAGE_PREFIX }}/api:.*|image: ${{ env.IMAGE_PREFIX }}/api:${{ github.sha }}|g" gitops/base/api/deployment.yaml
          fi
          
          # Update base Web image tag only if Web was built
          if [ "${{ needs.build-web.result }}" == "success" ] && [ -f gitops/base/web/deployment.yaml ]; then
            sed -i "s|image: ${{ env.IMAGE_PREFIX }}/web:.*|image: ${{ env.IMAGE_PREFIX }}/web:${{ github.sha }}|g" gitops/base/web/deployment.yaml
          fi
          
          # Update base DB migration image tag only if DB was built
          if [ "${{ needs.build-db-migration.result }}" == "success" ] && [ -f gitops/base/database/migration-job.yaml ]; then
            sed -i "s|image: ${{ env.IMAGE_PREFIX }}/db-migration:.*|image: ${{ env.IMAGE_PREFIX }}/db-migration:${{ github.sha }}|g" gitops/base/database/migration-job.yaml
          fi
          
      - name: Commit and push changes
        run: |
          cd gitops
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Deploy to development: ${{ github.sha }}

            Updated by: ${{ github.actor }}
            Environment: development
            Trigger: push to main
            API: ${{ env.IMAGE_PREFIX }}/api:${{ github.sha }}
            Web: ${{ env.IMAGE_PREFIX }}/web:${{ github.sha }}
            DB Migration: ${{ env.IMAGE_PREFIX }}/db-migration:${{ github.sha }}"
            git push
          fi

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-api, build-web, build-db-migration]
    if: always() && github.event_name == 'release' && (needs.build-api.result == 'success' || needs.build-web.result == 'success' || needs.build-db-migration.result == 'success' || (needs.build-api.result == 'skipped' && needs.build-web.result == 'skipped' && needs.build-db-migration.result == 'skipped'))
    steps:
      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.GITOPS_REPOSITORY }}
          token: ${{ secrets.GITOPS_TOKEN }}
          path: gitops
          
      - name: Update staging kustomization
        run: |
          # Create or update staging image patches
          mkdir -p gitops/environments/staging/patches
          
          # Create API image patch
          cat > gitops/environments/staging/patches/api-image.yaml << EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: diary-api
          spec:
            template:
              spec:
                containers:
                - name: api
                  image: ${{ env.IMAGE_PREFIX }}/api:${{ github.sha }}
          EOF
          
          # Create Web image patch
          cat > gitops/environments/staging/patches/web-image.yaml << EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: diary-web
          spec:
            template:
              spec:
                containers:
                - name: web
                  image: ${{ env.IMAGE_PREFIX }}/web:${{ github.sha }}
          EOF
          
          # Create DB migration image patch
          cat > gitops/environments/staging/patches/migration-image.yaml << EOF
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: diary-migration
          spec:
            template:
              spec:
                containers:
                - name: migration
                  image: ${{ env.IMAGE_PREFIX }}/db-migration:${{ github.sha }}
          EOF
          
          # Update kustomization.yaml to include image patches
          if ! grep -q "patches:" gitops/environments/staging/kustomization.yaml; then
            echo "" >> gitops/environments/staging/kustomization.yaml
            echo "patches:" >> gitops/environments/staging/kustomization.yaml
            echo "- patches/api-image.yaml" >> gitops/environments/staging/kustomization.yaml
            echo "- patches/web-image.yaml" >> gitops/environments/staging/kustomization.yaml
            echo "- patches/migration-image.yaml" >> gitops/environments/staging/kustomization.yaml
          fi
          
      - name: Commit and push changes
        run: |
          cd gitops
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Deploy to staging: ${{ github.event.release.tag_name }}

            Updated by: ${{ github.actor }}
            Environment: staging
            Trigger: release published
            Release: ${{ github.event.release.tag_name }}
            API: ${{ env.IMAGE_PREFIX }}/api:${{ github.sha }}
            Web: ${{ env.IMAGE_PREFIX }}/web:${{ github.sha }}
            DB Migration: ${{ env.IMAGE_PREFIX }}/db-migration:${{ github.sha }}"
            git push
          fi
