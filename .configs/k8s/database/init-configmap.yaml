apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  labels:
    app: postgres
    component: init
data:
  01-init-db.sql: |
    -- Database initialization script for diary application
    -- Create application user if it doesn't exist
    DO $$
    BEGIN
      IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'diary_user') THEN
        CREATE ROLE diary_user WITH LOGIN PASSWORD 'change_this_password';
      END IF;
    END
    $$;

    -- Create application schema
    CREATE SCHEMA IF NOT EXISTS app AUTHORIZATION diary_user;

    -- Grant necessary permissions
    GRANT USAGE ON SCHEMA app TO diary_user;
    GRANT CREATE ON SCHEMA app TO diary_user;
    GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA app TO diary_user;
    GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA app TO diary_user;

    -- Set default privileges for future objects
    ALTER DEFAULT PRIVILEGES IN SCHEMA app GRANT USAGE, SELECT ON SEQUENCES TO diary_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA app GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO diary_user;

    -- Create extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";

    -- Set search path for the application user
    ALTER ROLE diary_user SET search_path = app, public;

  02-seed-data.sql: |
    -- Seed data for development environment only
    SET search_path = app, public;

    -- Insert sample users (development only)
    INSERT INTO users (id, email, created_at, updated_at) 
    VALUES 
      (1, 'demo@example.com', NOW(), NOW())
    ON CONFLICT (email) DO NOTHING;

    -- Insert sample diary entry
    INSERT INTO diary_entries (title, content, user_id, created_at, updated_at)
    VALUES 
      (
        'Welcome to Your Digital Diary',
        '<h1>Welcome!</h1><p>This is your first diary entry in the development environment.</p>',
        1,
        NOW(),
        NOW()
      )
    ON CONFLICT DO NOTHING;
---
# Init container job to run initialization scripts
apiVersion: batch/v1
kind: Job
metadata:
  name: postgres-init
  labels:
    app: postgres-init
    component: initialization
spec:
  ttlSecondsAfterFinished: 3600
  template:
    metadata:
      labels:
        app: postgres-init
        component: initialization
    spec:
      restartPolicy: OnFailure
      initContainers:
      - name: wait-for-postgres
        image: postgres:16-alpine
        command: ['sh', '-c']
        args:
        - |
          until pg_isready -h postgres -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
      containers:
      - name: init-db
        image: postgres:16-alpine
        command: ["/bin/sh"]
        args:
        - -c
        - |
          echo "Running database initialization..."
          for script in /docker-entrypoint-initdb.d/*.sql; do
            echo "Executing $script..."
            psql -h postgres -U postgres -d diary -f "$script"
          done
          echo "Database initialization completed!"
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: init-scripts
        configMap:
          name: postgres-init-scripts